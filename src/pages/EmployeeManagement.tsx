import React, { useState } from "react";
import {
  Eye,
  EyeOff,
  Edit2,
  ArrowRight,
  History,
  Shield,
  Users,
  CheckCircle,
  MapPin,
} from "lucide-react";
import { DataTable, Column } from "../components/ui/DataTable";
import { toast, Toaster } from "sonner";
import {
  Dialog,
  DialogContent,
  DialogHeader,
  DialogTitle,
} from "../components/ui/dialog";
import { Button } from "../components/ui/button";
import { Input } from "../components/ui/input";
import { Label } from "../components/ui/label";
import {
  getDepartments,
  getEmployees,
  createEmployee,
  updateEmployee,
  transferEmployee as transferEmployeeAPI,
  getEmployeeWorkHistory,
  getAreas,
} from "../services/api";
import { usePermission } from "../components/PermissionGuard";
import { ROLES, PERMISSIONS } from "../utils/permissions";
import { Modal } from "@/components/ui/Modal";
import { ChangeDeliveryArea } from "../components/employee/change-delivery-area";

// Interface matching SQL structure
interface Employee {
  maNV: number;
  tenNV: string;
  ngaySinh?: string;
  diaChi?: string;
  luong?: number;
  maTK?: number;
  // Additional fields for UI
  department?: string;
  departmentName?: string;
  username?: string;
  isActive: string; // Changed from boolean to string to match API
  createdAt: string;
  updatedAt?: string;
  currentRole?: string;
  khuVucPhuTrach?: Array<{
    MaKhuVuc: string;
    TenKhuVuc: string;
    NhanVien_KhuVuc: {
      NgayTao: string;
      TrangThai: number;
    };
  }>;
}

export const EmployeeManagement = () => {
  const { hasPermission } = usePermission();
  const canCreate = hasPermission("nhanvien.tao") || hasPermission("toanquyen");
  const canEdit = hasPermission("nhanvien.sua") || hasPermission("toanquyen");
  const canAssign =
    hasPermission("nhanvien.phancong") || hasPermission("toanquyen");

  const [departments, setDepartments] = useState<
    { id: string; name: string }[]
  >([]);
  const [areas, setAreas] = useState<{ MaKhuVuc: string; TenKhuVuc: string }[]>(
    []
  );

  // Helper functions for handling multi-select areas
  const handleAreaToggle = (areaCode: string, isTransfer = false) => {
    if (isTransfer) {
      const currentAreas = transferData.selectedAreas;
      const newAreas = currentAreas.includes(areaCode)
        ? currentAreas.filter((code) => code !== areaCode)
        : [...currentAreas, areaCode];
      setTransferData({ ...transferData, selectedAreas: newAreas });
    } else {
      const currentAreas = formData.selectedAreas;
      const newAreas = currentAreas.includes(areaCode)
        ? currentAreas.filter((code) => code !== areaCode)
        : [...currentAreas, areaCode];
      setFormData({ ...formData, selectedAreas: newAreas });
    }
  };

  const isAreaSelected = (areaCode: string, isTransfer = false) => {
    return isTransfer
      ? transferData.selectedAreas.includes(areaCode)
      : formData.selectedAreas.includes(areaCode);
  };

  // Helper functions for currency formatting
  const formatCurrency = (value: number): string => {
    if (!value || value === 0) return "";
    return new Intl.NumberFormat("vi-VN", {
      style: "currency",
      currency: "VND",
      minimumFractionDigits: 0,
      maximumFractionDigits: 0,
    }).format(value);
  };

  const unformatCurrency = (value: string): number => {
    if (!value) return 0;
    // Remove all non-digit characters
    const numberString = value.replace(/\D/g, "");
    return parseInt(numberString) || 0;
  };

  const handleSalaryChange = (value: string) => {
    // Allow only numbers and common currency characters
    const cleanValue = value.replace(/[^\d.,‚Ç´]/g, "");
    const numericValue = unformatCurrency(cleanValue);
    setFormData({ ...formData, luong: numericValue });
  };

  // Helper functions for work history
  const formatDate = (dateString: string) => {
    return new Date(dateString).toLocaleDateString("vi-VN", {
      day: "2-digit",
      month: "2-digit",
      year: "numeric",
    });
  };

  const calculateWorkDuration = (startDate: string, endDate: string) => {
    const start = new Date(startDate);
    const end = new Date(endDate);

    // ƒê·∫£m b·∫£o endDate >= startDate
    if (end < start) {
      return "0 ng√†y";
    }

    // T√≠nh s·ªë nƒÉm, th√°ng ch√≠nh x√°c
    let years = end.getFullYear() - start.getFullYear();
    let months = end.getMonth() - start.getMonth();

    // ƒêi·ªÅu ch·ªânh n·∫øu th√°ng √¢m
    if (months < 0) {
      years--;
      months += 12;
    }

    // ƒêi·ªÅu ch·ªânh n·∫øu ng√†y trong th√°ng ch∆∞a ƒë·ªß
    if (end.getDate() < start.getDate()) {
      months--;
      if (months < 0) {
        years--;
        months += 12;
      }
    }

    // Format k·∫øt qu·∫£ theo ƒë·ªãnh d·∫°ng: X nƒÉm Y th√°ng
    const parts = [];
    if (years > 0) {
      parts.push(`${years} nƒÉm`);
    }
    if (months > 0) {
      parts.push(`${months} th√°ng`);
    }

    // N·∫øu ch∆∞a ƒë·ªß 1 th√°ng th√¨ hi·ªÉn th·ªã "D∆∞·ªõi 1 th√°ng"
    if (years === 0 && months === 0) {
      return "D∆∞·ªõi 1 th√°ng";
    }

    return parts.join(" ");
  };

  // H√†m t√≠nh t·ªïng th·ªùi gian l√†m vi·ªác t·ª´ t·∫•t c·∫£ l·ªãch s·ª≠
  const calculateTotalWorkDuration = (workHistoryList: any[]) => {
    if (!workHistoryList || workHistoryList.length === 0) {
      return "D∆∞·ªõi 1 th√°ng";
    }

    let totalYears = 0;
    let totalMonths = 0;

    workHistoryList.forEach((history: any) => {
      const startDate = new Date(history.NgayBatDau);
      const endDate = history.NgayKetThuc
        ? new Date(history.NgayKetThuc)
        : new Date(); // N·∫øu ch∆∞a k·∫øt th√∫c th√¨ t√≠nh ƒë·∫øn hi·ªán t·∫°i

      // ƒê·∫£m b·∫£o endDate >= startDate
      if (endDate >= startDate) {
        // T√≠nh s·ªë nƒÉm, th√°ng cho t·ª´ng kho·∫£ng th·ªùi gian
        let years = endDate.getFullYear() - startDate.getFullYear();
        let months = endDate.getMonth() - startDate.getMonth();

        // ƒêi·ªÅu ch·ªânh n·∫øu th√°ng √¢m
        if (months < 0) {
          years--;
          months += 12;
        }

        // ƒêi·ªÅu ch·ªânh n·∫øu ng√†y trong th√°ng ch∆∞a ƒë·ªß
        if (endDate.getDate() < startDate.getDate()) {
          months--;
          if (months < 0) {
            years--;
            months += 12;
          }
        }

        // C·ªông d·ªìn v√†o t·ªïng
        totalYears += years;
        totalMonths += months;
      }
    });

    // ƒêi·ªÅu ch·ªânh th√°ng d∆∞ th√†nh nƒÉm
    if (totalMonths >= 12) {
      totalYears += Math.floor(totalMonths / 12);
      totalMonths = totalMonths % 12;
    }

    // Format k·∫øt qu·∫£
    const parts = [];
    if (totalYears > 0) {
      parts.push(`${totalYears} nƒÉm`);
    }
    if (totalMonths > 0) {
      parts.push(`${totalMonths} th√°ng`);
    }

    return parts.length > 0 ? parts.join(" ") : "D∆∞·ªõi 1 th√°ng";
  };

  // Fetch work history for specific employee
  const fetchWorkHistory = async (maNV: number) => {
    try {
      const workHistoryData = await getEmployeeWorkHistory(maNV);
      setWorkHistory(workHistoryData);
    } catch (error) {
      console.error("Error fetching work history:", error);
      setWorkHistory([]);
      toast.error("L·ªói khi t·∫£i l·ªãch s·ª≠ l√†m vi·ªác");
    }
  };

  // Handle view history
  const handleViewHistory = async (employee: Employee) => {
    // N·∫øu mu·ªën h·∫°n ch·∫ø quy·ªÅn xem l·ªãch s·ª≠, c√≥ th·ªÉ th√™m check t·∫°i ƒë√¢y
    setSelectedEmployeeHistory(employee);
    await fetchWorkHistory(employee.maNV);
    setIsHistoryModalOpen(true);
  };

  // Fetch vai tr√≤ hi·ªán t·∫°i c·ªßa nh√¢n vi√™n
  const fetchEmployeeRole = async (maNV: number): Promise<string | null> => {
    try {
      const response = await fetch(
        `http://localhost:8080/api/employees/${maNV}/role`,
        {
          headers: {
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
        }
      );

      console.log(`üì° Response status: ${response.status}`);
      console.log(`üì° Response headers:`, response.headers);

      if (response.ok) {
        const result = await response.json();
        console.log(`‚úÖ Response data:`, result);

        if (result.success && result.data) {
          const roleId = result.data.roleId || result.data.role;
          console.log(`üéØ Extracted roleId: ${roleId}`);
          return roleId;
        } else {
          console.log(`‚ùå Response not successful or missing data:`, result);
        }
      } else {
        console.log(`‚ùå Response not OK. Status: ${response.status}`);
        try {
          const errorText = await response.text();
          console.log(`‚ùå Error response body:`, errorText);
        } catch (e) {
          console.log(`‚ùå Could not read error response body`);
        }
      }
      return null;
    } catch (error) {
      console.error("‚ùå Error fetching employee role:", error);
      return null;
    }
  };

  // H√†m helper ƒë·ªÉ chuy·ªÉn ƒë·ªïi roleId th√†nh roleKey cho UI
  const getRoleKeyFromId = (roleId: string | number): string | null => {
    const numericId = typeof roleId === "string" ? parseInt(roleId) : roleId;
    console.log(
      `üîç Converting roleId ${roleId} (numeric: ${numericId}) to roleKey`
    );

    // T√¨m role c√≥ id tr√πng kh·ªõp
    const roleEntry = Object.entries(ROLES).find(
      ([key, role]) => role.id === numericId
    );

    if (roleEntry) {
      const [roleKey] = roleEntry;
      console.log(`‚úÖ Found roleKey: ${roleKey} for roleId: ${roleId}`);
      return roleKey;
    } else {
      console.log(`‚ùå No roleKey found for roleId: ${roleId}`);
      return null;
    }
  };

  // Permissions: open modal and load data
  const handleOpenPermissions = async (employee: Employee) => {
    console.log(`üöÄ Opening permissions for employee:`, employee);
    setPermissionEmployee(employee);
    setIsPermissionModalOpen(true);

    // Fetch v√† t·ª± ƒë·ªông select vai tr√≤ hi·ªán t·∫°i c·ªßa nh√¢n vi√™n
    console.log(`üîç About to fetch role for employee maNV: ${employee.maNV}`);
    const currentRole = await fetchEmployeeRole(employee.maNV);
    console.log(`üéØ Received currentRole: ${currentRole}`);

    // Chuy·ªÉn ƒë·ªïi roleId th√†nh roleKey ƒë·ªÉ UI c√≥ th·ªÉ select ƒë√∫ng
    if (currentRole) {
      const roleKey = getRoleKeyFromId(currentRole);
      console.log(`üîë Converted roleId ${currentRole} to roleKey: ${roleKey}`);
      setSelectedRole(roleKey);
      console.log(`‚úÖ selectedRole state set to: ${roleKey}`);
    } else {
      setSelectedRole(null);
      console.log(`‚ùå No role found, selectedRole set to null`);
    }
  };

  const handleSavePermissions = async () => {
    if (!permissionEmployee || !selectedRole) return;

    try {
      // L·∫•y roleId t·ª´ selectedRole (roleKey) ƒë·ªÉ g·ª≠i l√™n API
      const roleId = ROLES[selectedRole as keyof typeof ROLES]?.id;
      console.log(
        `üîç Sending roleId ${roleId} (from roleKey: ${selectedRole}) to API`
      );

      if (!roleId) {
        toast.error("Kh√¥ng t√¨m th·∫•y th√¥ng tin vai tr√≤");
        return;
      }

      // G√°n vai tr√≤ cho nh√¢n vi√™n th√¥ng qua API
      const response = await fetch(
        `http://localhost:8080/api/employees/${permissionEmployee.maNV}/role`,
        {
          method: "PUT",
          headers: {
            "Content-Type": "application/json",
            Authorization: `Bearer ${localStorage.getItem("token")}`,
          },
          body: JSON.stringify({
            roleId: roleId,
          }),
        }
      );

      if (response.ok) {
        const result = await response.json();
        if (result.success) {
          toast.success(
            `G√°n vai tr√≤ "${
              ROLES[selectedRole as keyof typeof ROLES]?.displayName
            }" cho nh√¢n vi√™n th√†nh c√¥ng`
          );
          setIsPermissionModalOpen(false);
          setSelectedRole(null);
        } else {
          toast.error(result.message || "G√°n vai tr√≤ th·∫•t b·∫°i");
        }
      } else {
        toast.error("C√≥ l·ªói khi g√°n vai tr√≤");
      }
    } catch (err) {
      console.error("Assign role error:", err);
      toast.error("C√≥ l·ªói khi g√°n vai tr√≤");
    }
  };

  // Handle open change delivery area modal
  const handleOpenChangeArea = (employee: Employee) => {
    if (employee.department !== "11") {
      toast.error("Ch·ª©c nƒÉng n√†y ch·ªâ d√†nh cho nh√¢n vi√™n b·ªô ph·∫≠n giao h√†ng");
      return;
    }
    setAreaEmployee(employee);
    setIsChangeAreaModalOpen(true);
  };

  // Fetch departments with TrangThai === true
  React.useEffect(() => {
    const fetchDepartments = async () => {
      try {
        const departmentsData = await getDepartments();
        const filtered = departmentsData.data
          .filter((item: any) => item.TrangThai === true)
          .map((item: any) => ({
            id: item.MaBoPhan?.toString(),
            name: item.TenBoPhan || "",
          }));
        setDepartments(filtered);
      } catch (error) {
        setDepartments([]);
      }
    };
    fetchDepartments();
  }, []);

  // Fetch areas
  React.useEffect(() => {
    const fetchAreas = async () => {
      try {
        const areasData = await getAreas();
        setAreas(Array.isArray(areasData) ? areasData : []);
      } catch (error) {
        console.error("Error fetching areas:", error);
        setAreas([]);
      }
    };
    fetchAreas();
  }, []);
  const [employees, setEmployees] = useState<Employee[]>([]);

  // Fetch employees from API
  const refreshEmployees = async () => {
    try {
      const employeesData = await getEmployees();
      console.log(`üîç Fetched employees:`, employeesData);
      setEmployees(Array.isArray(employeesData) ? employeesData : []);
    } catch (error) {
      console.error("üí• Fetch Error:", error);
      setEmployees([]);
      toast.error("L·ªói khi t·∫£i danh s√°ch nh√¢n vi√™n");
    }
  };
  React.useEffect(() => {
    refreshEmployees();
  }, []);
  const [isModalOpen, setIsModalOpen] = useState(false);
  const [isTransferModalOpen, setIsTransferModalOpen] = useState(false);
  const [isHistoryModalOpen, setIsHistoryModalOpen] = useState(false);
  const [isPermissionModalOpen, setIsPermissionModalOpen] = useState(false);
  const [isDetailModalOpen, setIsDetailModalOpen] = useState(false);
  const [isChangeAreaModalOpen, setIsChangeAreaModalOpen] = useState(false);
  const [openFromDetail, setOpenFromDetail] = useState(false); // Track if modal opened from detail
  const [selectedEmployee, setSelectedEmployee] = useState<Employee | null>(
    null
  );
  const [editingEmployee, setEditingEmployee] = useState<Employee | null>(null);
  const [transferEmployee, setTransferEmployee] = useState<Employee | null>(
    null
  );
  const [selectedEmployeeHistory, setSelectedEmployeeHistory] =
    useState<Employee | null>(null);
  const [permissionEmployee, setPermissionEmployee] = useState<Employee | null>(
    null
  );
  const [selectedRole, setSelectedRole] = useState<string | null>(null);
  const [areaEmployee, setAreaEmployee] = useState<Employee | null>(null);

  // Debug logging for selectedRole
  React.useEffect(() => {
    console.log(`üîç Debug - selectedRole changed to: ${selectedRole}`);
    if (selectedRole) {
      console.log(`üîç Debug - ROLES object:`, ROLES);
      console.log(
        `üîç Debug - ROLES[selectedRole]:`,
        ROLES[selectedRole as keyof typeof ROLES]
      );
      console.log(
        `üîç Debug - Role ID: ${ROLES[selectedRole as keyof typeof ROLES]?.id}`
      );
      console.log(
        `üîç Debug - Role Display Name: ${
          ROLES[selectedRole as keyof typeof ROLES]?.displayName
        }`
      );
    }
  }, [selectedRole]);

  const [workHistory, setWorkHistory] = useState<any[]>([]);
  const [transferData, setTransferData] = useState({
    newDepartment: "",
    transferDate: new Date().toISOString().slice(0, 10),
    position: "Nh√¢n vi√™n",
    notes: "",
    selectedAreas: [] as string[], // Changed from district to selectedAreas array
    areaStartDate: "", // Ng√†y b·∫Øt ƒë·∫ßu ph·ª• tr√°ch giao h√†ng (khi chuy·ªÉn sang b·ªô ph·∫≠n giao h√†ng)
  });
  const [filterDepartment, setFilterDepartment] = useState<string>("all");
  const [filterStatus, setFilterStatus] = useState<string>("all");
  const [showPassword, setShowPassword] = useState(false);

  const [formData, setFormData] = useState({
    tenNV: "",
    ngaySinh: "",
    diaChi: "",
    luong: 0,
    department: "",
    chucVu: "Nh√¢n vi√™n",
    ghiChu: "",
    username: "",
    password: "3TShop@2025",
    isActive: "DANGLAMVIEC",
    selectedAreas: [] as string[], // Changed from district to selectedAreas array
    areaStartDate: "",
  });

  // Handle view employee detail
  const handleViewDetail = (employee: Employee) => {
    setSelectedEmployee(employee);
    setIsDetailModalOpen(true);
  };

  // Handle edit from detail dialog
  const handleEditFromDetail = () => {
    if (selectedEmployee) {
      setEditingEmployee(selectedEmployee);
      // const activeAreas = selectedEmployee.khuVucPhuTrach || []; // Commented out - using dedicated modal
      setFormData({
        tenNV: selectedEmployee.tenNV || "",
        ngaySinh: selectedEmployee.ngaySinh || "",
        diaChi: selectedEmployee.diaChi || "",
        luong: selectedEmployee.luong || 0,
        department: selectedEmployee.department || "",
        chucVu: "Nh√¢n vi√™n",
        ghiChu: "",
        username: selectedEmployee.username || "",
        password: "",
        isActive: selectedEmployee.isActive || "DANGLAMVIEC",
        // selectedAreas: activeAreas.map((kv: any) => kv.MaKhuVuc?.toString()), // Commented out - using dedicated modal
        selectedAreas: [], // Keep empty since we use dedicated modal for area management
        areaStartDate: "",
      });
      setIsDetailModalOpen(false);
      setOpenFromDetail(true);
      setIsModalOpen(true);
    }
  };

  // Handle transfer from detail dialog
  const handleTransferFromDetail = () => {
    if (selectedEmployee) {
      setTransferEmployee(selectedEmployee);
      setTransferData({
        newDepartment: "",
        transferDate: new Date().toISOString().slice(0, 10),
        position: "Nh√¢n vi√™n",
        notes: "",
        selectedAreas: [],
        areaStartDate: "",
      });
      setIsDetailModalOpen(false);
      setOpenFromDetail(true);
      setIsTransferModalOpen(true);
    }
  };

  // Handle view history from detail dialog
  const handleViewHistoryFromDetail = async () => {
    if (selectedEmployee) {
      setSelectedEmployeeHistory(selectedEmployee);
      await fetchWorkHistory(selectedEmployee.maNV);
      setIsDetailModalOpen(false);
      setIsHistoryModalOpen(true);
    }
  };

  const handleAdd = () => {
    if (!canCreate) {
      toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m nh√¢n vi√™n");
      return;
    }
    setEditingEmployee(null);
    setFormData({
      tenNV: "",
      ngaySinh: "",
      diaChi: "",
      luong: 0,
      department: "",
      chucVu: "Nh√¢n vi√™n",
      ghiChu: "",
      username: "",
      password: "3TShop@2025",
      isActive: "DANGLAMVIEC",
      selectedAreas: [],
      areaStartDate: "",
    });
    setIsModalOpen(true);
  };

  const handleTransfer = async () => {
    if (!canAssign) {
      toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn ƒëi·ªÅu chuy·ªÉn nh√¢n vi√™n");
      return;
    }
    if (!transferEmployee || !transferData.newDepartment) {
      toast.warning("Vui l√≤ng ch·ªçn b·ªô ph·∫≠n m·ªõi!");
      return;
    }

    if (!transferData.transferDate) {
      toast.warning("Vui l√≤ng ch·ªçn ng√†y chuy·ªÉn!");
      return;
    }

    // Ki·ªÉm tra n·∫øu chuy·ªÉn sang b·ªô ph·∫≠n giao h√†ng (m√£ 11) th√¨ ph·∫£i ch·ªçn khu v·ª±c
    const isDeliveryDepartment = transferData.newDepartment === "11";
    if (isDeliveryDepartment && transferData.selectedAreas.length === 0) {
      toast.warning(
        "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt khu v·ª±c ph·ª• tr√°ch cho b·ªô ph·∫≠n giao h√†ng!"
      );
      return;
    }
    if (isDeliveryDepartment && transferData.selectedAreas.length > 0) {
      if (!transferData.areaStartDate) {
        toast.warning("Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu ph·ª• tr√°ch khu v·ª±c!");
        return;
      }
      const today = new Date().toISOString().slice(0, 10);
      if (transferData.areaStartDate <= today) {
        toast.error("Ng√†y b·∫Øt ƒë·∫ßu ph·ª• tr√°ch ph·∫£i l·ªõn h∆°n ng√†y hi·ªán t·∫°i!");
        return;
      }
    }
    try {
      const payload = {
        MaNV: transferEmployee.maNV,
        MaBoPhanMoi: parseInt(transferData.newDepartment),
        NgayChuyen: transferData.transferDate,
        ChucVu: transferData.position,
        GhiChu: transferData.notes,
        ...(isDeliveryDepartment && {
          KhuVucPhuTrach: transferData.selectedAreas,
          NgayBatDauPhuTrach: transferData.areaStartDate,
        }),
      };

      await transferEmployeeAPI(payload);
      toast.success(`ƒêi·ªÅu chuy·ªÉn ${transferEmployee.tenNV} th√†nh c√¥ng!`);
      setIsTransferModalOpen(false);
      setTransferEmployee(null);
      setTransferData({
        newDepartment: "",
        transferDate: new Date().toISOString().slice(0, 10),
        position: "Nh√¢n vi√™n",
        notes: "",
        selectedAreas: [],
        areaStartDate: "",
      });
      refreshEmployees(); // Refresh l·∫°i danh s√°ch nh√¢n vi√™n

      // Reopen detail dialog if it was opened from there
      if (selectedEmployee) {
        setIsDetailModalOpen(true);
      }
    } catch (error) {
      console.error("Transfer error:", error);
      toast.error("C√≥ l·ªói x·∫£y ra khi ƒëi·ªÅu chuy·ªÉn nh√¢n vi√™n!");
    }
  };

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault();
    if (editingEmployee) {
      if (!canEdit) {
        toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn s·ª≠a th√¥ng tin nh√¢n vi√™n");
        return;
      }
    } else {
      if (!canCreate) {
        toast.error("B·∫°n kh√¥ng c√≥ quy·ªÅn th√™m nh√¢n vi√™n");
        return;
      }
    }

    // Validate required fields
    if (!formData.username || !formData.tenNV) {
      toast.warning("Vui l√≤ng nh·∫≠p ƒë·∫ßy ƒë·ªß th√¥ng tin b·∫Øt bu·ªôc!");
      return;
    }

    // For new employees, department is required
    if (!editingEmployee && !formData.department) {
      toast.warning("Vui l√≤ng ch·ªçn b·ªô ph·∫≠n!");
      return;
    }

    // For new employees in delivery department, areas are required
    if (
      !editingEmployee &&
      formData.department === "11" &&
      formData.selectedAreas.length === 0
    ) {
      toast.warning(
        "Vui l√≤ng ch·ªçn √≠t nh·∫•t m·ªôt khu v·ª±c ph·ª• tr√°ch cho b·ªô ph·∫≠n giao h√†ng!"
      );
      return;
    }
    // Validate area start date for new delivery employees
    if (
      !editingEmployee &&
      formData.department === "11" &&
      formData.selectedAreas.length > 0
    ) {
      if (!formData.areaStartDate) {
        toast.warning("Vui l√≤ng ch·ªçn ng√†y b·∫Øt ƒë·∫ßu ph·ª• tr√°ch khu v·ª±c!");
        return;
      }
      const today = new Date().toISOString().slice(0, 10);
      if (formData.areaStartDate <= today) {
        toast.error("Ng√†y b·∫Øt ƒë·∫ßu ph·ª• tr√°ch ph·∫£i l·ªõn h∆°n ng√†y hi·ªán t·∫°i!");
        return;
      }
    }

    // For editing employees in delivery department, areas are required
    // NOTE: Commented out - Now using dedicated modal for area management
    /*
    if (
      editingEmployee &&
      editingEmployee.department === "11" &&
      formData.selectedAreas.length === 0
    ) {
      toast.warning(
        "Nh√¢n vi√™n b·ªô ph·∫≠n giao h√†ng ph·∫£i ƒë∆∞·ª£c ph√¢n c√¥ng √≠t nh·∫•t m·ªôt khu v·ª±c!"
      );
      return;
    }
    */

    // For new employees, password is required
    if (!editingEmployee && !formData.password) {
      toast.warning("Vui l√≤ng nh·∫≠p m·∫≠t kh·∫©u cho nh√¢n vi√™n m·ªõi!");
      return;
    }

    // Validate email format
    const emailRegex = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
    if (!emailRegex.test(formData.username)) {
      toast.error("Email kh√¥ng h·ª£p l·ªá");
      return;
    }

    // Validate password only when it's provided (for both new and edit cases)
    if (formData.password && formData.password.trim() !== "") {
      const passwordRegex =
        /^(?=.*[a-z])(?=.*[A-Z])(?=.*\d)(?=.*[@$!%*?&])[A-Za-z\d@$!%*?&]{8,}$/;
      if (!passwordRegex.test(formData.password)) {
        toast.error(
          "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm ch·ªØ th∆∞·ªùng, ch·ªØ hoa, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát"
        );
        return;
      }
    }

    try {
      if (editingEmployee) {
        // Prepare edit payload with only basic employee fields
        const editPayload: any = {
          Email: formData.username,
          TenNV: formData.tenNV,
          NgaySinh: formData.ngaySinh,
          DiaChi: formData.diaChi,
          Luong: formData.luong,
        };
        // Add area assignments if employee is in delivery department
        // NOTE: Commented out - Now using dedicated modal for area management
        /*
        if (editingEmployee.department === "11") {
          editPayload.KhuVucPhuTrach = formData.selectedAreas;
        }
        */
        // Only add password when it's provided (not empty)
        if (formData.password && formData.password.trim() !== "") {
          editPayload.Password = formData.password;
        }
        await updateEmployee(editingEmployee.maNV, editPayload);
        toast.success("C·∫≠p nh·∫≠t nh√¢n vi√™n th√†nh c√¥ng");
        setIsModalOpen(false);
        setEditingEmployee(null);
        refreshEmployees();
      } else {
        // Chu·∫©n b·ªã payload cho nh√¢n vi√™n m·ªõi
        const today = new Date().toISOString().slice(0, 10);
        const employeePayload: any = {
          Email: formData.username,
          TenNV: formData.tenNV,
          NgaySinh: formData.ngaySinh,
          DiaChi: formData.diaChi,
          Luong: formData.luong,
        };

        // N·∫øu l√† b·ªô ph·∫≠n giao h√†ng, th√™m tr∆∞·ªùng KhuVuc
        if (formData.department === "11" && formData.selectedAreas.length > 0) {
          employeePayload.KhuVucPhuTrach = formData.selectedAreas; // Send array of selected areas
          if (formData.areaStartDate) {
            employeePayload.NgayBatDauPhuTrach = formData.areaStartDate; // custom field for backend
          }
        }

        // For new employees, always include departments array
        employeePayload.BoPhan = [
          {
            MaBoPhan: parseInt(formData.department),
            NgayBatDau: today,
            TrangThai: formData.isActive,
            ChucVu: formData.chucVu,
            GhiChu: formData.ghiChu,
          },
        ];

        // Only add password when it's provided (not empty)
        if (formData.password && formData.password.trim() !== "") {
          employeePayload.MatKhau = formData.password;
        }

        await createEmployee(employeePayload);
        toast.success("T·∫°o nh√¢n vi√™n th√†nh c√¥ng");
        setIsModalOpen(false);
        setEditingEmployee(null);
        refreshEmployees();
      }
    } catch (error) {
      console.error("Error with employee operation:", error);
      if (editingEmployee) {
        toast.error("L·ªói khi c·∫≠p nh·∫≠t nh√¢n vi√™n");
      } else {
        toast.error("L·ªói khi t·∫°o nh√¢n vi√™n");
      }
    }
  };

  // Filter employees
  const filteredEmployees = employees.filter((employee) => {
    const matchesDepartment =
      filterDepartment === "all" || employee.department === filterDepartment;
    const matchesStatus =
      filterStatus === "all" ||
      (filterStatus === "active" && employee.isActive === "DANGLAMVIEC") ||
      (filterStatus === "inactive" && employee.isActive !== "DANGLAMVIEC");
    return matchesDepartment && matchesStatus;
  });

  const columns: Column[] = [
    {
      key: "maNV",
      title: "M√£",
      dataIndex: "maNV",
      sortable: true,
      width: "60px",
      render: (value) => (
        <span className="font-mono text-xs bg-gray-100 px-1 py-1 rounded">
          {value}
        </span>
      ),
    },
    {
      key: "employee",
      title: "Nh√¢n vi√™n",
      dataIndex: "tenNV",
      width: "180px",
      render: (_, record) => {
        return (
          <div
            className="min-w-0 cursor-pointer hover:bg-blue-50 p-2 rounded transition-colors"
            onClick={() => handleViewDetail(record)}
            title="Click ƒë·ªÉ xem chi ti·∫øt"
          >
            <div className="font-medium text-gray-900 text-xs truncate">
              {record.tenNV}
            </div>
            <div className="text-xs text-gray-500 truncate">
              {record.username}
            </div>
          </div>
        );
      },
    },
    {
      key: "departmentName",
      title: "B·ªô ph·∫≠n",
      dataIndex: "departmentName",
      width: "100px",
      render: (value) => (
        <span className="text-xs truncate block">{value || "Ch∆∞a c√≥"}</span>
      ),
    },
    {
      key: "luong",
      title: "L∆∞∆°ng",
      dataIndex: "luong",
      sortable: true,
      width: "120px",
      render: (value) => (
        <span
          className="text-xs"
          title={value ? formatCurrency(value) : "Ch∆∞a c√≥"}
        >
          {value ? `${(value / 1000000).toFixed(1)}M` : "0"}
        </span>
      ),
    },
    {
      key: "ngaySinh",
      title: "Ng√†y sinh",
      dataIndex: "ngaySinh",
      width: "80px",
      render: (value) => (
        <span className="text-xs">
          {value
            ? new Date(value).toLocaleDateString("vi-VN", {
                day: "2-digit",
                month: "2-digit",
                year: "2-digit",
              })
            : "-"}
        </span>
      ),
    },
    {
      key: "diaChi",
      title: "ƒê·ªãa ch·ªâ",
      dataIndex: "diaChi",
      width: "120px",
      render: (value) => (
        <span
          className="text-xs truncate block max-w-[110px]"
          title={value || "Ch∆∞a c√≥"}
        >
          {value || "Ch∆∞a c√≥"}
        </span>
      ),
    },
    {
      key: "isActive",
      title: "Tr·∫°ng th√°i",
      dataIndex: "isActive",
      width: "90px",
      render: (value) => (
        <span
          className={`px-1 py-1 text-xs font-medium rounded ${
            value === "DANGLAMVIEC"
              ? "bg-green-100 text-green-700"
              : "bg-red-100 text-red-700"
          }`}
        >
          {value === "DANGLAMVIEC" ? "Ho·∫°t ƒë·ªông" : "Ngh·ªâ vi·ªác"}
        </span>
      ),
    },
    {
      key: "actions",
      title: "Thao t√°c",
      width: "120px",
      render: (_, record) => (
        <div className="flex gap-2 justify-center">
          <button
            onClick={(e) => {
              e.stopPropagation(); // Prevent row click
              handleViewDetail(record);
            }}
            className="group relative bg-blue-50 hover:bg-blue-100 text-blue-600 hover:text-blue-700 p-2 rounded-lg transition-all duration-200 hover:shadow-md"
            title="Xem chi ti·∫øt"
          >
            <Eye className="w-4 h-4" />
          </button>
          {record.department === "11" && (
            <button
              onClick={(e) => {
                e.stopPropagation(); // Prevent row click
                handleOpenChangeArea(record);
              }}
              className="group relative bg-green-50 hover:bg-green-100 text-green-600 hover:text-green-700 p-2 rounded-lg transition-all duration-200 hover:shadow-md"
              title="Qu·∫£n l√Ω khu v·ª±c ph·ª• tr√°ch"
            >
              <MapPin className="w-4 h-4" />
            </button>
          )}
          <button
            onClick={() => handleOpenPermissions(record)}
            className="group relative bg-amber-50 hover:bg-amber-100 text-amber-600 hover:text-amber-700 p-2 rounded-lg transition-all duration-200 hover:shadow-md"
            title="Xem/G√°n quy·ªÅn"
          >
            <Shield className="w-4 h-4" />
          </button>
        </div>
      ),
    },
  ];

  // const [areaSearch, setAreaSearch] = useState(""); // Commented out - using dedicated modal for area management
  const [transferAreaSearch, setTransferAreaSearch] = useState("");
  // const filteredAreas = areas.filter((a: any) =>
  //   a.TenKhuVuc.toLowerCase().includes(areaSearch.toLowerCase())
  // ); // Commented out - using dedicated modal for area management
  const filteredTransferAreas = areas.filter((a: any) =>
    a.TenKhuVuc.toLowerCase().includes(transferAreaSearch.toLowerCase())
  );

  return (
    <>
      <DataTable
        title={`Qu·∫£n l√Ω nh√¢n vi√™n (${filteredEmployees.length})`}
        columns={columns}
        data={filteredEmployees}
        onAdd={canCreate ? handleAdd : undefined}
        addButtonText="Th√™m nh√¢n vi√™n"
        searchPlaceholder="T√¨m ki·∫øm nh√¢n vi√™n..."
        filterComponent={
          <div className="flex flex-wrap gap-3 bg-gray-50 p-3 rounded-lg border border-gray-200">
            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                L·ªçc theo b·ªô ph·∫≠n
              </label>
              <select
                value={filterDepartment}
                onChange={(e) => setFilterDepartment(e.target.value)}
                className="px-2 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-[#825B32] focus:border-transparent focus:outline-none text-sm"
              >
                <option value="all">T·∫•t c·∫£ b·ªô ph·∫≠n</option>
                {departments.map((dept) => (
                  <option key={dept.id} value={dept.id}>
                    {dept.name}
                  </option>
                ))}
              </select>
            </div>

            <div>
              <label className="block text-sm font-medium text-gray-700 mb-1">
                L·ªçc theo tr·∫°ng th√°i
              </label>
              <select
                value={filterStatus}
                onChange={(e) => setFilterStatus(e.target.value)}
                className="px-2 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-[#825B32] focus:border-transparent focus:outline-none text-sm"
              >
                <option value="all">T·∫•t c·∫£</option>
                <option value="active">ƒêang l√†m vi·ªác</option>
                <option value="inactive">Ngh·ªâ vi·ªác</option>
              </select>
            </div>
          </div>
        }
      />

      <Toaster position="top-center" richColors />

      {/* Add/Edit Employee Dialog */}
      <Dialog open={isModalOpen} onOpenChange={setIsModalOpen}>
        <DialogContent className="max-w-4xl max-h-[90vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-xl font-semibold">
              {editingEmployee
                ? "S·ª≠a th√¥ng tin nh√¢n vi√™n"
                : "Th√™m nh√¢n vi√™n m·ªõi"}
            </DialogTitle>
          </DialogHeader>

          <form onSubmit={handleSubmit} className="space-y-6">
            {/* Th√¥ng tin c∆° b·∫£n */}
            <div className="bg-gray-50 p-4 rounded-lg border">
              <h3 className="text-sm font-semibold text-gray-900 mb-4 flex items-center">
                <div className="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
                Th√¥ng tin c∆° b·∫£n
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-4">
                <div>
                  <Label
                    htmlFor="tenNV"
                    className="text-sm font-medium text-gray-700"
                  >
                    H·ªç v√† t√™n *
                  </Label>
                  <Input
                    id="tenNV"
                    type="text"
                    value={formData.tenNV}
                    onChange={(e) =>
                      setFormData({ ...formData, tenNV: e.target.value })
                    }
                    className="mt-1"
                    placeholder="Nh·∫≠p h·ªç v√† t√™n"
                    required
                  />
                </div>

                <div>
                  <Label
                    htmlFor="username"
                    className="text-sm font-medium text-gray-700"
                  >
                    Email *
                  </Label>
                  <Input
                    id="username"
                    type="email"
                    value={formData.username}
                    onChange={(e) =>
                      setFormData({ ...formData, username: e.target.value })
                    }
                    className="mt-1"
                    placeholder="example@domain.com"
                    required
                  />
                </div>

                <div>
                  <Label
                    htmlFor="ngaySinh"
                    className="text-sm font-medium text-gray-700"
                  >
                    Ng√†y sinh
                  </Label>
                  <Input
                    id="ngaySinh"
                    type="date"
                    value={formData.ngaySinh}
                    onChange={(e) =>
                      setFormData({ ...formData, ngaySinh: e.target.value })
                    }
                    className="mt-1"
                  />
                </div>

                <div className="md:col-span-2">
                  <Label
                    htmlFor="diaChi"
                    className="text-sm font-medium text-gray-700"
                  >
                    ƒê·ªãa ch·ªâ
                  </Label>
                  <Input
                    id="diaChi"
                    type="text"
                    value={formData.diaChi}
                    onChange={(e) =>
                      setFormData({ ...formData, diaChi: e.target.value })
                    }
                    className="mt-1"
                    placeholder="Nh·∫≠p ƒë·ªãa ch·ªâ"
                  />
                </div>

                <div>
                  <Label
                    htmlFor="luong"
                    className="text-sm font-medium text-gray-700"
                  >
                    L∆∞∆°ng
                  </Label>
                  <Input
                    id="luong"
                    type="text"
                    value={formData.luong ? formatCurrency(formData.luong) : ""}
                    onChange={(e) => handleSalaryChange(e.target.value)}
                    className="mt-1"
                    placeholder="0 ‚Ç´"
                  />
                </div>
              </div>
            </div>

            {/* Th√¥ng tin c√¥ng vi·ªác */}
            <div className="bg-blue-50 p-4 rounded-lg border border-blue-200">
              <h3 className="text-sm font-semibold text-gray-900 mb-4 flex items-center">
                <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                Th√¥ng tin c√¥ng vi·ªác
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
                <div>
                  <Label
                    htmlFor="department"
                    className="text-sm font-medium text-gray-700"
                  >
                    B·ªô ph·∫≠n {!editingEmployee ? "*" : "(Kh√¥ng th·ªÉ thay ƒë·ªïi)"}
                  </Label>
                  <select
                    id="department"
                    value={formData.department}
                    onChange={(e) =>
                      setFormData({
                        ...formData,
                        department: e.target.value,
                        selectedAreas: [],
                      })
                    }
                    className={`mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent focus:outline-none text-sm ${
                      editingEmployee ? "bg-gray-100 cursor-not-allowed" : ""
                    }`}
                    required={!editingEmployee}
                    disabled={!!editingEmployee}
                  >
                    <option value="">Ch·ªçn b·ªô ph·∫≠n</option>
                    {departments.map((dept) => (
                      <option key={dept.id} value={dept.id}>
                        {dept.name}
                      </option>
                    ))}
                  </select>
                  {editingEmployee && (
                    <div className="mt-1 text-xs text-gray-500">
                      S·ª≠ d·ª•ng n√∫t "ƒêi·ªÅu chuy·ªÉn" ƒë·ªÉ thay ƒë·ªïi b·ªô ph·∫≠n
                    </div>
                  )}
                </div>

                <div>
                  <Label
                    htmlFor="chucVu"
                    className="text-sm font-medium text-gray-700"
                  >
                    Ch·ª©c v·ª•
                  </Label>
                  <Input
                    id="chucVu"
                    type="text"
                    value={formData.chucVu}
                    onChange={(e) =>
                      setFormData({ ...formData, chucVu: e.target.value })
                    }
                    className="mt-1"
                    placeholder="Nh√¢n vi√™n"
                  />
                </div>

                {!editingEmployee && (
                  <div className="flex items-center space-x-4 mt-6">
                    <div className="flex items-center">
                      <input
                        type="checkbox"
                        id="isActive"
                        checked={formData.isActive === "DANGLAMVIEC"}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            isActive: e.target.checked
                              ? "DANGLAMVIEC"
                              : "NGHIVIEC",
                          })
                        }
                        className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                      />
                      <Label
                        htmlFor="isActive"
                        className="ml-2 text-sm text-gray-700 cursor-pointer"
                      >
                        ƒêang l√†m vi·ªác
                      </Label>
                    </div>
                  </div>
                )}
              </div>

              {/* Khu v·ª±c ph·ª• tr√°ch cho b·ªô ph·∫≠n giao h√†ng */}
              {/* NOTE: Commented out - Now using dedicated modal from change-delivery-area.tsx */}
              {/*
              {((!editingEmployee && formData.department === "11") ||
                (editingEmployee && editingEmployee.department === "11")) && (
                <div className="mt-4">
                  <Label className="text-sm font-medium text-gray-700 mb-2 block">
                    Khu v·ª±c ph·ª• tr√°ch {!editingEmployee ? "*" : ""} (c√≥ th·ªÉ ch·ªçn
                    nhi·ªÅu)
                  </Label>
                  <div className="mb-2 flex items-center gap-2">
                    <input
                      type="text"
                      placeholder="T√¨m khu v·ª±c..."
                      className="w-full px-3 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none"
                      value={areaSearch}
                      onChange={(e) => setAreaSearch(e.target.value)}
                    />
                  </div>
                  <div className="max-h-40 overflow-y-auto border border-gray-300 rounded-md p-3 bg-white">
                    {areas.length === 0 ? (
                      <div className="text-sm text-gray-500 text-center py-4">
                        ƒêang t·∫£i danh s√°ch khu v·ª±c...
                      </div>
                    ) : filteredAreas.length === 0 ? (
                      <div className="text-sm text-gray-500 text-center py-4">
                        Kh√¥ng t√¨m th·∫•y khu v·ª±c ph√π h·ª£p
                      </div>
                    ) : (
                      <div className="grid grid-cols-2 md:grid-cols-3 gap-2">
                        {filteredAreas.map((area) => (
                          <label
                            key={area.MaKhuVuc}
                            className="flex items-center space-x-2 text-sm hover:bg-gray-50 p-2 rounded cursor-pointer transition-colors"
                          >
                            <input
                              type="checkbox"
                              checked={isAreaSelected(
                                area.MaKhuVuc?.toString()
                              )}
                              onChange={() =>
                                handleAreaToggle(area.MaKhuVuc?.toString())
                              }
                              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500"
                            />
                            <span className="truncate">{area.TenKhuVuc}</span>
                          </label>
                        ))}
                      </div>
                    )}
                  </div>
                  {formData.selectedAreas.length > 0 && (
                    <div className="mt-3 p-3 bg-blue-50 rounded-md">
                      <div className="text-sm font-medium text-gray-700 mb-2">
                        ƒê√£ ch·ªçn {formData.selectedAreas.length} khu v·ª±c:
                      </div>
                      <div className="flex flex-wrap gap-1">
                        {formData.selectedAreas.slice(0, 5).map((areaCode) => {
                          const area = areas.find(
                            (a) =>
                              a.MaKhuVuc?.toString() === areaCode?.toString()
                          );
                          return area ? (
                            <span
                              key={area.MaKhuVuc}
                              className="text-xs bg-blue-100 text-blue-700 px-2 py-1 rounded-full"
                            >
                              {area.TenKhuVuc}
                            </span>
                          ) : null;
                        })}
                        {formData.selectedAreas.length > 5 && (
                          <span className="text-xs text-gray-500 bg-gray-100 px-2 py-1 rounded-full">
                            +{formData.selectedAreas.length - 5} kh√°c
                          </span>
                        )}
                      </div>
                    </div>
                  )}
                  {editingEmployee && (
                    <div className="mt-2 p-2 bg-amber-50 border border-amber-200 rounded-md">
                      <div className="text-xs text-amber-700">
                        üí° <strong>L∆∞u √Ω:</strong> B·∫°n c√≥ th·ªÉ thay ƒë·ªïi khu v·ª±c
                        ph·ª• tr√°ch b·∫±ng c√°ch b·ªè tick c√°c khu v·ª±c hi·ªán t·∫°i v√† ch·ªçn
                        khu v·ª±c m·ªõi.
                      </div>
                    </div>
                  )}
                  {!editingEmployee && formData.department === "11" && (
                    <div className="mt-4">
                      <Label className="text-sm font-medium text-gray-700 mb-1 block">
                        Ng√†y b·∫Øt ƒë·∫ßu ph·ª• tr√°ch *
                      </Label>
                      <Input
                        type="date"
                        value={formData.areaStartDate}
                        min={new Date().toISOString().slice(0, 10)}
                        onChange={(e) =>
                          setFormData({
                            ...formData,
                            areaStartDate: e.target.value,
                          })
                        }
                        className="text-sm"
                      />
                      <p className="text-xs text-gray-500 mt-1">
                        Ph·∫£i l·ªõn h∆°n ng√†y hi·ªán t·∫°i.
                      </p>
                    </div>
                  )}
                </div>
              )}
              */}

              {!editingEmployee && (
                <div className="mt-4">
                  <Label
                    htmlFor="ghiChu"
                    className="text-sm font-medium text-gray-700"
                  >
                    Ghi ch√∫
                  </Label>
                  <textarea
                    id="ghiChu"
                    value={formData.ghiChu}
                    onChange={(e) =>
                      setFormData({ ...formData, ghiChu: e.target.value })
                    }
                    className="mt-1 w-full px-3 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent focus:outline-none text-sm"
                    rows={3}
                    placeholder="Ghi ch√∫ v·ªÅ nh√¢n vi√™n..."
                  />
                </div>
              )}
            </div>

            {/* Th√¥ng tin b·∫£o m·∫≠t */}
            <div className="bg-yellow-50 p-4 rounded-lg border border-yellow-200">
              <h3 className="text-sm font-semibold text-gray-900 mb-4 flex items-center">
                <div className="w-2 h-2 bg-yellow-500 rounded-full mr-2"></div>
                Th√¥ng tin b·∫£o m·∫≠t
              </h3>
              <div>
                <Label
                  htmlFor="password"
                  className="text-sm font-medium text-gray-700"
                >
                  M·∫≠t kh·∫©u{" "}
                  {!editingEmployee
                    ? "*"
                    : "(ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng mu·ªën thay ƒë·ªïi)"}
                </Label>
                <div className="flex items-center space-x-2 mt-1">
                  <Input
                    id="password"
                    type={showPassword ? "text" : "password"}
                    value={formData.password}
                    onChange={(e) =>
                      setFormData({ ...formData, password: e.target.value })
                    }
                    className="flex-1"
                    required={!editingEmployee}
                    minLength={8}
                    placeholder={
                      editingEmployee
                        ? "Nh·∫≠p m·∫≠t kh·∫©u m·ªõi n·∫øu mu·ªën thay ƒë·ªïi"
                        : "Nh·∫≠p m·∫≠t kh·∫©u"
                    }
                  />
                  <Button
                    type="button"
                    variant="outline"
                    size="sm"
                    onClick={() => setShowPassword(!showPassword)}
                    className="px-3"
                    title={showPassword ? "·∫®n m·∫≠t kh·∫©u" : "Hi·ªán m·∫≠t kh·∫©u"}
                  >
                    {showPassword ? (
                      <EyeOff className="w-4 h-4" />
                    ) : (
                      <Eye className="w-4 h-4" />
                    )}
                  </Button>
                </div>
                <div className="mt-2 text-xs text-gray-600">
                  {!editingEmployee
                    ? "M·∫≠t kh·∫©u ph·∫£i c√≥ √≠t nh·∫•t 8 k√Ω t·ª±, g·ªìm ch·ªØ th∆∞·ªùng, ch·ªØ hoa, s·ªë v√† k√Ω t·ª± ƒë·∫∑c bi·ªát"
                    : "ƒê·ªÉ tr·ªëng n·∫øu kh√¥ng mu·ªën thay ƒë·ªïi m·∫≠t kh·∫©u hi·ªán t·∫°i"}
                </div>
              </div>
            </div>

            {/* Action buttons */}
            <div className="flex justify-between pt-6 border-t">
              <div>
                {openFromDetail && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setIsModalOpen(false);
                      setOpenFromDetail(false);
                      setIsDetailModalOpen(true);
                    }}
                    className="border-gray-300 text-gray-700 hover:bg-gray-50"
                  >
                    ‚Üê Quay l·∫°i
                  </Button>
                )}
              </div>
              <div className="flex space-x-3">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsModalOpen(false);
                    setOpenFromDetail(false);
                  }}
                >
                  H·ªßy
                </Button>
                <Button type="submit" className="bg-blue-600 hover:bg-blue-700">
                  {editingEmployee ? "C·∫≠p nh·∫≠t" : "Th√™m nh√¢n vi√™n"}
                </Button>
              </div>
            </div>
          </form>
        </DialogContent>
      </Dialog>

      {/* Transfer Department Dialog */}
      <Dialog open={isTransferModalOpen} onOpenChange={setIsTransferModalOpen}>
        <DialogContent className="max-w-2xl max-h-[80vh] overflow-y-auto">
          <DialogHeader className="pb-3">
            <DialogTitle className="text-lg font-medium">
              ƒêi·ªÅu chuy·ªÉn nh√¢n vi√™n
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-3">
            {/* Th√¥ng tin nh√¢n vi√™n - Compact */}
            <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
              <div className="flex items-center space-x-3">
                <div className="bg-blue-500 text-white text-sm font-bold rounded-full w-10 h-10 flex items-center justify-center">
                  {transferEmployee?.maNV}
                </div>
                <div className="flex-1 min-w-0">
                  <h3 className="font-medium text-gray-900 text-base truncate">
                    {transferEmployee?.tenNV}
                  </h3>
                  <div className="flex items-center justify-between">
                    <p className="text-sm text-gray-600 truncate">
                      <span className="font-medium">
                        {transferEmployee?.departmentName}
                      </span>
                    </p>
                    {/* Hi·ªÉn th·ªã khu v·ª±c hi·ªán t·∫°i cho nh√¢n vi√™n giao h√†ng - Inline */}
                    {transferEmployee?.department === "11" &&
                      transferEmployee?.khuVucPhuTrach &&
                      transferEmployee.khuVucPhuTrach.length > 0 && (
                        <div className="flex items-center space-x-1">
                          <span className="text-xs text-gray-500">
                            Khu v·ª±c:
                          </span>
                          <div className="flex flex-wrap gap-1 max-w-[200px]">
                            {transferEmployee.khuVucPhuTrach
                              .filter(
                                (area: any) =>
                                  area.NhanVien_KhuVuc?.TrangThai === 1
                              )
                              .slice(0, 2)
                              .map((area: any) => (
                                <span
                                  key={area.MaKhuVuc}
                                  className="inline-block bg-blue-100 text-blue-800 text-xs px-1.5 py-0.5 rounded-full"
                                  title={area.TenKhuVuc}
                                >
                                  {area.TenKhuVuc.length > 8
                                    ? area.TenKhuVuc.substring(0, 8) + "..."
                                    : area.TenKhuVuc}
                                </span>
                              ))}
                            {transferEmployee.khuVucPhuTrach.filter(
                              (area: any) =>
                                area.NhanVien_KhuVuc?.TrangThai === 1
                            ).length > 2 && (
                              <span className="text-xs text-gray-500 bg-gray-100 px-1.5 py-0.5 rounded">
                                +
                                {transferEmployee.khuVucPhuTrach.filter(
                                  (area: any) =>
                                    area.NhanVien_KhuVuc?.TrangThai === 1
                                ).length - 2}
                              </span>
                            )}
                          </div>
                        </div>
                      )}
                  </div>
                </div>
              </div>
            </div>

            {/* Form ƒëi·ªÅu chuy·ªÉn */}
            <div className="space-y-3">
              <div className="grid grid-cols-3 gap-3">
                <div className="col-span-2">
                  <Label
                    htmlFor="newDepartment"
                    className="text-sm font-medium text-gray-700 mb-1 block"
                  >
                    B·ªô ph·∫≠n m·ªõi *
                  </Label>
                  <select
                    id="newDepartment"
                    value={transferData.newDepartment}
                    onChange={(e) =>
                      setTransferData({
                        ...transferData,
                        newDepartment: e.target.value,
                        selectedAreas: [],
                      })
                    }
                    className="w-full px-2 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent focus:outline-none text-sm"
                    required
                  >
                    <option value="">Ch·ªçn b·ªô ph·∫≠n</option>
                    {departments
                      .filter(
                        (dept) => dept.id !== transferEmployee?.department
                      )
                      .map((dept) => (
                        <option key={dept.id} value={dept.id}>
                          {dept.name}
                        </option>
                      ))}
                  </select>

                  {/* Hi·ªÉn th·ªã th√¥ng b√°o khi chuy·ªÉn t·ª´ giao h√†ng sang b·ªô ph·∫≠n kh√°c */}
                  {transferEmployee?.department === "11" &&
                    transferData.newDepartment &&
                    transferData.newDepartment !== "11" && (
                      <div className="mt-1 p-2 bg-orange-50 border border-orange-200 rounded-md">
                        <div className="text-xs text-orange-700">
                          ‚ö†Ô∏è Nh√¢n vi√™n s·∫Ω kh√¥ng c√≤n ph·ª• tr√°ch khu v·ª±c giao h√†ng
                        </div>
                      </div>
                    )}
                </div>

                <div>
                  <Label
                    htmlFor="transferDate"
                    className="text-sm font-medium text-gray-700 mb-1 block"
                  >
                    Ng√†y chuy·ªÉn *
                  </Label>
                  <Input
                    id="transferDate"
                    type="date"
                    value={transferData.transferDate}
                    onChange={(e) =>
                      setTransferData({
                        ...transferData,
                        transferDate: e.target.value,
                      })
                    }
                    className="text-sm"
                    required
                  />
                </div>
              </div>

              <div>
                <Label
                  htmlFor="position"
                  className="text-sm font-medium text-gray-700 mb-1 block"
                >
                  Ch·ª©c v·ª• m·ªõi
                </Label>
                <Input
                  id="position"
                  type="text"
                  value={transferData.position}
                  onChange={(e) =>
                    setTransferData({
                      ...transferData,
                      position: e.target.value,
                    })
                  }
                  className="text-sm"
                  placeholder="Nh√¢n vi√™n"
                />
              </div>

              {/* Khu v·ª±c ph·ª• tr√°ch cho b·ªô ph·∫≠n giao h√†ng - Compact */}
              {transferData.newDepartment === "11" && (
                <div>
                  <Label className="text-sm font-medium text-gray-700 mb-1 block">
                    Khu v·ª±c ph·ª• tr√°ch giao h√†ng *
                    <span className="text-xs text-blue-600 ml-1">
                      (c√≥ th·ªÉ ch·ªçn nhi·ªÅu)
                    </span>
                  </Label>
                  <div className="mb-2 flex items-center gap-2">
                    <input
                      type="text"
                      placeholder="T√¨m khu v·ª±c..."
                      className="w-full px-2 py-2 border border-gray-300 rounded-md text-sm focus:ring-2 focus:ring-blue-500 focus:border-transparent outline-none"
                      value={transferAreaSearch}
                      onChange={(e) => setTransferAreaSearch(e.target.value)}
                    />
                  </div>
                  <div className="max-h-32 overflow-y-auto border border-gray-300 rounded-md p-2 bg-white">
                    {areas.length === 0 ? (
                      <div className="text-sm text-gray-500 text-center py-3">
                        ƒêang t·∫£i...
                      </div>
                    ) : filteredTransferAreas.length === 0 ? (
                      <div className="text-sm text-gray-500 text-center py-3">
                        Kh√¥ng t√¨m th·∫•y khu v·ª±c ph√π h·ª£p
                      </div>
                    ) : (
                      <div className="grid grid-cols-2 gap-1">
                        {filteredTransferAreas.map((area) => (
                          <label
                            key={area.MaKhuVuc}
                            className="flex items-center space-x-1.5 text-sm hover:bg-gray-50 p-1.5 rounded cursor-pointer transition-colors"
                          >
                            <input
                              type="checkbox"
                              checked={isAreaSelected(area.MaKhuVuc, true)}
                              onChange={() =>
                                handleAreaToggle(area.MaKhuVuc, true)
                              }
                              className="rounded border-gray-300 text-blue-600 focus:ring-blue-500 w-3 h-3"
                            />
                            <span
                              className="flex-1 truncate text-xs"
                              title={area.TenKhuVuc}
                            >
                              {area.TenKhuVuc}
                            </span>
                          </label>
                        ))}
                      </div>
                    )}
                  </div>
                  {transferData.selectedAreas.length > 0 && (
                    <div className="mt-2 p-2 bg-blue-50 rounded-md">
                      <div className="text-xs font-medium text-gray-700">
                        ‚úÖ ƒê√£ ch·ªçn {transferData.selectedAreas.length} khu v·ª±c
                      </div>
                    </div>
                  )}
                  <div className="mt-4">
                    <Label className="text-sm font-medium text-gray-700 mb-1 block">
                      Ng√†y b·∫Øt ƒë·∫ßu ph·ª• tr√°ch *
                    </Label>
                    <Input
                      type="date"
                      value={transferData.areaStartDate}
                      min={new Date().toISOString().slice(0, 10)}
                      onChange={(e) =>
                        setTransferData({
                          ...transferData,
                          areaStartDate: e.target.value,
                        })
                      }
                      className="text-sm"
                    />
                    <p className="text-xs text-gray-500 mt-1">
                      Ph·∫£i l·ªõn h∆°n ng√†y hi·ªán t·∫°i.
                    </p>
                  </div>
                </div>
              )}

              <div>
                <Label
                  htmlFor="notes"
                  className="text-sm font-medium text-gray-700 mb-1 block"
                >
                  Ghi ch√∫
                </Label>
                <textarea
                  id="notes"
                  value={transferData.notes}
                  onChange={(e) =>
                    setTransferData({ ...transferData, notes: e.target.value })
                  }
                  className="w-full px-2 py-2 border border-gray-300 rounded-md focus:ring-2 focus:ring-blue-500 focus:border-transparent focus:outline-none text-sm"
                  rows={2}
                  placeholder="L√Ω do ƒëi·ªÅu chuy·ªÉn..."
                />
              </div>
            </div>

            <div className="flex justify-between pt-3 border-t">
              <div>
                {openFromDetail && selectedEmployee && (
                  <Button
                    type="button"
                    variant="outline"
                    onClick={() => {
                      setIsTransferModalOpen(false);
                      setOpenFromDetail(false);
                      setIsDetailModalOpen(true);
                    }}
                    className="border-gray-300 text-gray-700 hover:bg-gray-50 text-sm px-3 py-1.5"
                  >
                    ‚Üê Quay l·∫°i
                  </Button>
                )}
              </div>
              <div className="flex space-x-2">
                <Button
                  type="button"
                  variant="outline"
                  onClick={() => {
                    setIsTransferModalOpen(false);
                    setOpenFromDetail(false);
                  }}
                  className="text-sm px-3 py-1.5"
                >
                  H·ªßy
                </Button>
                <Button
                  onClick={handleTransfer}
                  className="bg-blue-600 hover:bg-blue-700 text-sm px-3 py-1.5"
                >
                  X√°c nh·∫≠n ƒëi·ªÅu chuy·ªÉn
                </Button>
              </div>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Work History Dialog */}
      <Dialog open={isHistoryModalOpen} onOpenChange={setIsHistoryModalOpen}>
        <DialogContent className="max-w-3xl max-h-[80vh] overflow-y-auto">
          <DialogHeader className="pb-3">
            <DialogTitle className="text-lg font-medium">
              L·ªãch s·ª≠ l√†m vi·ªác - {selectedEmployeeHistory?.tenNV}
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-3">
            {/* Employee Info - Compact */}
            <div className="bg-blue-50 p-3 rounded-lg border border-blue-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-2">
                  <div className="bg-blue-500 text-white text-sm font-bold rounded-full w-10 h-10 flex items-center justify-center">
                    {selectedEmployeeHistory?.maNV}
                  </div>
                  <div className="flex-1 min-w-0">
                    <h3 className="font-medium text-gray-900 text-base truncate">
                      {selectedEmployeeHistory?.tenNV}
                    </h3>
                    <div className="flex items-center space-x-2">
                      <p className="text-sm text-gray-600 truncate">
                        {selectedEmployeeHistory?.departmentName ||
                          "Ch∆∞a ph√¢n c√¥ng"}
                      </p>
                      {/* Hi·ªÉn th·ªã khu v·ª±c ph·ª• tr√°ch cho nh√¢n vi√™n giao h√†ng - Inline */}
                      {selectedEmployeeHistory?.department === "11" &&
                        selectedEmployeeHistory?.khuVucPhuTrach &&
                        selectedEmployeeHistory.khuVucPhuTrach.length > 0 && (
                          <div className="flex items-center space-x-1">
                            <span className="text-xs text-gray-500">‚Ä¢</span>
                            <div className="flex flex-wrap gap-1">
                              {selectedEmployeeHistory.khuVucPhuTrach
                                .filter(
                                  (area: any) =>
                                    area.NhanVien_KhuVuc?.TrangThai === 1
                                )
                                .slice(0, 2)
                                .map((area: any) => (
                                  <span
                                    key={area.MaKhuVuc}
                                    className="inline-block bg-green-100 text-green-800 text-xs px-1.5 py-0.5 rounded"
                                    title={area.TenKhuVuc}
                                  >
                                    {area.TenKhuVuc.length > 6
                                      ? area.TenKhuVuc.substring(0, 6) + "..."
                                      : area.TenKhuVuc}
                                  </span>
                                ))}
                              {selectedEmployeeHistory.khuVucPhuTrach.filter(
                                (area: any) =>
                                  area.NhanVien_KhuVuc?.TrangThai === 1
                              ).length > 2 && (
                                <span className="text-xs text-gray-500 bg-gray-100 px-1.5 py-0.5 rounded">
                                  +
                                  {selectedEmployeeHistory.khuVucPhuTrach.filter(
                                    (area: any) =>
                                      area.NhanVien_KhuVuc?.TrangThai === 1
                                  ).length - 2}
                                </span>
                              )}
                            </div>
                          </div>
                        )}
                    </div>
                  </div>
                </div>
                <div className="text-right">
                  <div className="text-xs text-gray-600">T·ªïng th·ªùi gian</div>
                  <div className="font-medium text-gray-900 text-sm">
                    {calculateTotalWorkDuration(workHistory)}
                  </div>
                </div>
              </div>
            </div>

            {/* Work History Timeline - Compact */}
            <div className="space-y-3">
              <h4 className="text-sm font-medium text-gray-900 border-b pb-1">
                L·ªãch s·ª≠ c√¥ng t√°c ({workHistory.length})
              </h4>

              <div className="max-h-64 overflow-y-auto space-y-2">
                {workHistory.length === 0 ? (
                  <div className="text-center py-8">
                    <div className="text-gray-400 text-4xl mb-2">üìã</div>
                    <p className="text-gray-500 text-sm">
                      Ch∆∞a c√≥ l·ªãch s·ª≠ l√†m vi·ªác
                    </p>
                  </div>
                ) : (
                  workHistory
                    .sort(
                      (a: any, b: any) =>
                        new Date(b.NgayBatDau).getTime() -
                        new Date(a.NgayBatDau).getTime()
                    )
                    .map((history: any, index: number) => (
                      <div
                        key={`${history.MaBoPhan}-${history.NgayBatDau}`}
                        className={`p-3 rounded-lg border transition-all hover:shadow-sm ${
                          history.TrangThai === "DANGLAMVIEC"
                            ? "bg-green-50 border-green-200"
                            : "bg-gray-50 border-gray-200"
                        }`}
                      >
                        {/* Header - Compact */}
                        <div className="flex items-center justify-between mb-2">
                          <div className="flex items-center space-x-2">
                            <div className="bg-blue-500 text-white text-xs font-bold rounded-full w-6 h-6 flex items-center justify-center">
                              {workHistory.length - index}
                            </div>
                            <div className="flex-1 min-w-0">
                              <h5 className="font-medium text-gray-900 text-sm truncate">
                                {history.BoPhan?.TenBoPhan ||
                                  "B·ªô ph·∫≠n ch∆∞a x√°c ƒë·ªãnh"}
                              </h5>
                              <p className="text-xs text-gray-600">
                                {history.ChucVu || "Nh√¢n vi√™n"}
                              </p>
                            </div>
                          </div>
                          <span
                            className={`px-2 py-1 text-xs font-medium rounded ${
                              history.TrangThai === "DANGLAMVIEC"
                                ? "bg-green-100 text-green-800"
                                : "bg-gray-100 text-gray-700"
                            }`}
                          >
                            {history.TrangThai === "DANGLAMVIEC"
                              ? "ƒêang l√†m"
                              : "ƒê√£ ngh·ªâ"}
                          </span>
                        </div>

                        {/* Timeline - Compact Grid */}
                        <div className="grid grid-cols-3 gap-2 text-xs">
                          <div className="bg-white p-2 rounded border">
                            <div className="text-gray-600 font-medium mb-1">
                              B·∫Øt ƒë·∫ßu
                            </div>
                            <div className="text-gray-900 font-medium">
                              {formatDate(history.NgayBatDau)}
                            </div>
                          </div>
                          <div className="bg-white p-2 rounded border">
                            <div className="text-gray-600 font-medium mb-1">
                              {history.NgayKetThuc ? "K·∫øt th√∫c" : "Hi·ªán t·∫°i"}
                            </div>
                            <div className="text-gray-900 font-medium">
                              {history.NgayKetThuc
                                ? formatDate(history.NgayKetThuc)
                                : "ƒêang l√†m"}
                            </div>
                          </div>
                          <div className="bg-white p-2 rounded border">
                            <div className="text-gray-600 font-medium mb-1">
                              Th·ªùi gian
                            </div>
                            <div className="text-blue-600 font-medium">
                              {calculateWorkDuration(
                                history.NgayBatDau,
                                history.NgayKetThuc ||
                                  new Date().toISOString().split("T")[0]
                              )}
                            </div>
                          </div>
                        </div>

                        {/* Notes - Compact */}
                        {history.GhiChu && (
                          <div className="mt-2 bg-white p-2 rounded border">
                            <div className="text-gray-600 font-medium text-xs mb-1">
                              Ghi ch√∫
                            </div>
                            <div className="text-gray-700 text-xs">
                              {history.GhiChu}
                            </div>
                          </div>
                        )}
                      </div>
                    ))
                )}
              </div>
            </div>

            {/* Footer - Compact */}
            <div className="flex justify-between items-center pt-3 border-t">
              <div className="text-xs text-gray-500">
                {workHistory.length} b·∫£n ghi
              </div>
              <Button
                onClick={() => setIsHistoryModalOpen(false)}
                className="bg-blue-600 hover:bg-blue-700 text-sm px-3 py-1.5"
              >
                ƒê√≥ng
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Employee Detail Dialog */}
      <Dialog open={isDetailModalOpen} onOpenChange={setIsDetailModalOpen}>
        <DialogContent className="max-w-3xl max-h-[85vh] overflow-y-auto">
          <DialogHeader>
            <DialogTitle className="text-lg font-medium">
              Th√¥ng tin chi ti·∫øt - {selectedEmployee?.tenNV}
            </DialogTitle>
          </DialogHeader>

          <div className="space-y-4">
            {/* Employee Info Header */}
            <div className="bg-gradient-to-r from-blue-50 to-indigo-50 p-4 rounded-lg border border-blue-200">
              <div className="flex items-center justify-between">
                <div className="flex items-center space-x-3">
                  <div className="bg-blue-500 text-white text-sm font-medium rounded-full w-10 h-10 flex items-center justify-center">
                    {selectedEmployee?.maNV}
                  </div>
                  <div>
                    <h3 className="font-medium text-gray-900 text-base">
                      {selectedEmployee?.tenNV}
                    </h3>
                    <p className="text-xs text-gray-600">
                      <span className="font-medium">B·ªô ph·∫≠n:</span>{" "}
                      {selectedEmployee?.departmentName || "Ch∆∞a ph√¢n c√¥ng"}
                    </p>
                    <p className="text-xs text-gray-600">
                      <span className="font-medium">Email:</span>{" "}
                      {selectedEmployee?.username}
                    </p>
                  </div>
                </div>
                <div className="text-right">
                  <span
                    className={`px-2 py-1 text-xs font-medium rounded ${
                      selectedEmployee?.isActive === "DANGLAMVIEC"
                        ? "bg-green-100 text-green-700"
                        : "bg-red-100 text-red-700"
                    }`}
                  >
                    {selectedEmployee?.isActive === "DANGLAMVIEC"
                      ? "ƒêang l√†m vi·ªác"
                      : "Ngh·ªâ vi·ªác"}
                  </span>
                </div>
              </div>
            </div>

            {/* Personal Information */}
            <div className="bg-gray-50 p-3 rounded-lg border">
              <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                <div className="w-2 h-2 bg-blue-500 rounded-full mr-2"></div>
                Th√¥ng tin c√° nh√¢n
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 lg:grid-cols-3 gap-3">
                <div>
                  <p className="text-xs text-gray-900 mt-1">
                    {selectedEmployee?.ngaySinh
                      ? new Date(
                          selectedEmployee.ngaySinh as string
                        ).toLocaleDateString("vi-VN")
                      : "Ch∆∞a c√≥ th√¥ng tin"}
                  </p>
                </div>
                <div>
                  <label className="text-xs font-medium text-gray-600">
                    ƒê·ªãa ch·ªâ
                  </label>
                  <p className="text-xs text-gray-900 mt-1">
                    {selectedEmployee?.diaChi || "Ch∆∞a c√≥ th√¥ng tin"}
                  </p>
                </div>
                <div>
                  <label className="text-xs font-medium text-gray-600">
                    L∆∞∆°ng
                  </label>
                  <p className="text-xs text-gray-900 mt-1 font-medium">
                    {selectedEmployee?.luong
                      ? formatCurrency(selectedEmployee.luong)
                      : "Ch∆∞a c√≥ th√¥ng tin"}
                  </p>
                </div>
              </div>
            </div>

            {/* Work Information */}
            <div className="bg-green-50 p-3 rounded-lg border border-green-200">
              <h3 className="text-sm font-medium text-gray-900 mb-3 flex items-center">
                <div className="w-2 h-2 bg-green-500 rounded-full mr-2"></div>
                Th√¥ng tin c√¥ng vi·ªác
              </h3>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-3">
                <div>
                  <label className="text-xs font-medium text-gray-600">
                    B·ªô ph·∫≠n
                  </label>
                  <p className="text-xs text-gray-900 mt-1">
                    {selectedEmployee?.departmentName || "Ch∆∞a ƒë∆∞·ª£c ph√¢n c√¥ng"}
                  </p>
                </div>
                <div>
                  <label className="text-xs font-medium text-gray-600">
                    Ng√†y b·∫Øt ƒë·∫ßu l√†m vi·ªác
                  </label>
                  <p className="text-xs text-gray-900 mt-1">
                    {selectedEmployee?.createdAt
                      ? new Date(selectedEmployee.createdAt).toLocaleDateString(
                          "vi-VN"
                        )
                      : "Ch∆∞a c√≥ th√¥ng tin"}
                  </p>
                </div>
              </div>

              {/* Areas for delivery employees */}
              {selectedEmployee?.department === "11" &&
                selectedEmployee?.khuVucPhuTrach &&
                selectedEmployee.khuVucPhuTrach.length > 0 && (
                  <div className="mt-3">
                    <label className="text-xs font-medium text-gray-600">
                      Khu v·ª±c ph·ª• tr√°ch
                    </label>
                    <div className="flex flex-wrap gap-1 mt-1">
                      {selectedEmployee.khuVucPhuTrach
                        .filter(
                          (area: any) => area.NhanVien_KhuVuc?.TrangThai === 1
                        )
                        .map((area: any) => (
                          <span
                            key={area.MaKhuVuc}
                            className="inline-block bg-green-100 text-green-800 text-xs px-2 py-1 rounded"
                            title={area.TenKhuVuc}
                          >
                            {area.TenKhuVuc}
                          </span>
                        ))}
                    </div>
                  </div>
                )}
            </div>

            {/* Action buttons */}
            <div className="flex justify-between items-center pt-4 border-t">
              <div className="flex space-x-2">
                <Button
                  onClick={handleEditFromDetail}
                  className="bg-blue-600 hover:bg-blue-700 flex items-center space-x-1 text-xs px-3 py-2"
                >
                  <Edit2 className="w-3 h-3" />
                  <span>S·ª≠a th√¥ng tin</span>
                </Button>
                <Button
                  onClick={handleTransferFromDetail}
                  variant="outline"
                  className="border-emerald-300 text-emerald-700 hover:bg-emerald-50 flex items-center space-x-1 text-xs px-3 py-2"
                >
                  <ArrowRight className="w-3 h-3" />
                  <span>ƒêi·ªÅu chuy·ªÉn</span>
                </Button>
                <Button
                  onClick={handleViewHistoryFromDetail}
                  variant="outline"
                  className="border-purple-300 text-purple-700 hover:bg-purple-50 flex items-center space-x-1 text-xs px-3 py-2"
                >
                  <History className="w-3 h-3" />
                  <span>L·ªãch s·ª≠</span>
                </Button>
              </div>
              <Button
                variant="outline"
                onClick={() => setIsDetailModalOpen(false)}
                className="text-xs px-3 py-2"
              >
                ƒê√≥ng
              </Button>
            </div>
          </div>
        </DialogContent>
      </Dialog>

      {/* Permissions Modal */}
      <Modal
        isOpen={isPermissionModalOpen}
        onClose={() => setIsPermissionModalOpen(false)}
        title={`G√°n vai tr√≤ cho nh√¢n vi√™n - ${permissionEmployee?.tenNV || ""}`}
        size="md"
      >
        <div className="space-y-4">
          <div className="text-sm text-gray-600">
            Ch·ªçn vai tr√≤ ph√π h·ª£p cho nh√¢n vi√™n. Vai tr√≤ s·∫Ω quy·∫øt ƒë·ªãnh c√°c quy·ªÅn
            h·∫°n m√† nh√¢n vi√™n c√≥ th·ªÉ th·ª±c hi·ªán.
          </div>

          {/* Hi·ªÉn th·ªã vai tr√≤ hi·ªán t·∫°i c·ªßa nh√¢n vi√™n */}
          {selectedRole && (
            <div className="bg-green-50 border border-green-200 rounded-lg p-3">
              <div className="flex items-center gap-2">
                <CheckCircle className="w-4 h-4 text-green-600" />
                <span className="text-sm font-medium text-green-800">
                  Vai tr√≤ hi·ªán t·∫°i:{" "}
                  <strong>
                    {ROLES[selectedRole as keyof typeof ROLES]?.displayName ||
                      `Unknown Role (${selectedRole})`}
                  </strong>
                </span>
              </div>
              <p className="text-xs text-green-600 mt-1">
                Vai tr√≤ n√†y ƒë√£ ƒë∆∞·ª£c g√°n cho nh√¢n vi√™n. B·∫°n c√≥ th·ªÉ ch·ªçn vai tr√≤
                kh√°c ƒë·ªÉ thay ƒë·ªïi.
              </p>
            </div>
          )}

          <div className="grid grid-cols-2 gap-3">
            {Object.entries(ROLES).map(([roleKey, role]) => (
              <div
                key={role.id}
                className={`p-3 rounded-lg border-2 cursor-pointer transition-all ${
                  selectedRole === roleKey
                    ? "border-[#825B32] bg-[#825B32]/5"
                    : "border-gray-200 hover:border-gray-300 hover:bg-gray-50"
                }`}
                onClick={() => setSelectedRole(roleKey)}
              >
                <div className="flex items-start justify-between">
                  <div className="flex-1">
                    <div className="flex items-center gap-2 mb-2">
                      <Users className="w-4 h-4 text-[#825B32]" />
                      <h3 className="font-semibold text-gray-900 text-sm">
                        {role.displayName}
                      </h3>
                    </div>
                    <p className="text-xs text-gray-600 mb-2">
                      ID: {role.id} ‚Ä¢ {role.permissions.length} quy·ªÅn h·∫°n
                    </p>

                    {/* Hi·ªÉn th·ªã m·ªôt s·ªë quy·ªÅn ch√≠nh */}
                    <div className="space-y-1">
                      {role.permissions.slice(0, 4).map((permission) => (
                        <div
                          key={permission}
                          className="flex items-center gap-1"
                        >
                          <div className="w-1.5 h-1.5 bg-green-400 rounded-full"></div>
                          <span className="text-xs text-gray-600 truncate">
                            {PERMISSIONS[
                              permission as keyof typeof PERMISSIONS
                            ] || permission}
                          </span>
                        </div>
                      ))}
                      {role.permissions.length > 4 && (
                        <div className="text-xs text-gray-500">
                          ... v√† {role.permissions.length - 4} quy·ªÅn kh√°c
                        </div>
                      )}
                    </div>
                  </div>

                  <div className="ml-2">
                    <div
                      className={`w-4 h-4 rounded-full border-2 flex items-center justify-center ${
                        selectedRole === roleKey
                          ? "border-[#825B32] bg-[#825B32]"
                          : "border-gray-300"
                      }`}
                    >
                      {selectedRole === roleKey && (
                        <div className="w-1.5 h-1.5 bg-white rounded-full"></div>
                      )}
                    </div>
                  </div>
                </div>
              </div>
            ))}
          </div>

          <div className="bg-blue-50 p-3 rounded-lg">
            <div className="text-xs text-blue-800">
              <strong>L∆∞u √Ω:</strong> G√°n vai tr√≤ s·∫Ω c·∫≠p nh·∫≠t t·∫•t c·∫£ quy·ªÅn h·∫°n
              c·ªßa nh√¢n vi√™n theo vai tr√≤ ƒë∆∞·ª£c ch·ªçn. Vi·ªác n√†y c√≥ th·ªÉ ·∫£nh h∆∞·ªüng
              ƒë·∫øn kh·∫£ nƒÉng truy c·∫≠p c√°c ch·ª©c nƒÉng c·ªßa nh√¢n vi√™n.
            </div>
          </div>

          <div className="flex justify-end gap-3 pt-4">
            <button
              type="button"
              onClick={() => {
                setIsPermissionModalOpen(false);
                setSelectedRole(null);
              }}
              className="px-4 py-2 text-sm bg-gray-200 rounded hover:bg-gray-300 transition-colors"
            >
              H·ªßy
            </button>
            <button
              type="button"
              onClick={handleSavePermissions}
              disabled={!selectedRole}
              className={`px-4 py-2 text-sm text-white rounded transition-colors ${
                selectedRole
                  ? "bg-[#825B32] hover:bg-[#6B4A2A]"
                  : "bg-gray-400 cursor-not-allowed"
              }`}
            >
              G√°n vai tr√≤
            </button>
          </div>
        </div>
      </Modal>

      {/* Change Delivery Area Modal */}
      <ChangeDeliveryArea
        isOpen={isChangeAreaModalOpen}
        onClose={() => setIsChangeAreaModalOpen(false)}
        employeeId={areaEmployee?.maNV || 0}
        employeeName={areaEmployee?.tenNV || ""}
      />
    </>
  );
};

export default EmployeeManagement;
